{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForms.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","_useState","useState","_useState2","Object","slicedToArray","btntext","setBtntext","react_default","a","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","hometext","role","placeholder","onClick","togglemode","htmlFor","TextForms","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","fontSize","rows","console","log","text1","toUpperCase","toLowerCase","toreplaced","prompt","tobereplaced","RegExp","repval","newtext","replace","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","App","setMode","body","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.91a50ab9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React,{useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  const [btntext,setBtntext]=useState(\"Enable Dark Mode\");\r\n\r\n  const togglestyle=()=>{\r\n    if(props.mode==='light'){\r\n      setBtntext(\"Enable Dark Mode\");\r\n    }\r\n    else{\r\n      setBtntext(\"Enable Light Mode\");\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode}  bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"\\\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  {props.hometext}\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">\r\n                  Link\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  href=\"#\"\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-bs-toggle=\"dropdown\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Dropdown\r\n                </a>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href=\"#\">\r\n                      Action\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href=\"#\">\r\n                      Another action\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <hr className=\"dropdown-divider\" />\r\n                  </li>\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href=\"#\">\r\n                      Something else here\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </li> */}\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link disabled\">Disabled</a>\r\n              </li> */}\r\n            </ul>\r\n            <form className=\"d-flex\" role=\"search\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form>\r\n          </div>\r\n          <div className=\"form-check form-switch mx-3\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.togglemode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className={`form-check-label text-${props.mode==='light'?'dark' : 'light'}`}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n              onClick={togglestyle}\r\n            >\r\n              {btntext}\r\n              \r\n            </label>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  hometext: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  hometext: \"Home text\",\r\n  title: \"Title Is Here\",\r\n};\r\n","import React,{useState} from \"react\";\r\n\r\nexport default function TextForms(props) {\r\n  const handleUpClick = ()=>{\r\n    console.log(\"uppercase was clicked\");\r\n    let text1=text.toUpperCase();\r\n    //setText(\"You Have clicked on handleUpClick\");\r\n    setText(text1);\r\n  }\r\n\r\n  const handleLoClick = ()=>{\r\n    console.log(\"uppercase was clicked\");\r\n    let text1=text.toLowerCase();\r\n    //setText(\"You Have clicked on handleUpClick\");\r\n    setText(text1);\r\n  }\r\n\r\n  const handleOnChange = (event)=>{\r\n    //console.log(\"uppercase was clicked\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const repwor =()=>{\r\n    let toreplaced=prompt(\"Enter The Word To Be Replaced : \");\r\n    let tobereplaced=new RegExp(toreplaced,'g');\r\n    let repval=prompt(\"Enter The replaced word : \");\r\n    let newtext=text.replace(tobereplaced,repval);\r\n    setText(newtext);\r\n  }\r\n\r\n  const tocleartext = ()=>{\r\n    setText('');\r\n  }\r\n\r\n  // const firstcharcap = ()=>{\r\n  //   //let newtext=text.charAt(0).toUpperCase()+text.slice(1);\r\n  //   let newtext=text.split(\" \")\r\n  //   newtext[0].toUpperCase();\r\n  //   setText(newtext);\r\n  // }\r\n\r\n  const [text,setText]=useState('Write something');\r\n  //console.log(useState('Enter Text 2'))\r\n  //text=\"new text\";//wrong way to change the state \r\n  //setText(\"new text\");\r\n\r\n\r\n  const handlecopy = ()=>{\r\n      var text=document.getElementById(\"exampleFormControlTextarea1\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n  }\r\n\r\n  const handleextraspace = () =>{\r\n    let newtext=text.split(/[ ]+/);\r\n    setText(newtext.join(\" \"))\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color : props.mode==='light'?'black' : 'white'}}>\r\n    <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea\r\n          className=\"form-control\"\r\n            value={text}  \r\n              onChange={handleOnChange}\r\n            id=\"exampleFormControlTextarea1\"\r\n            style={{backgroundColor : props.mode==='light'?'white' : '#8f90a1',color : props.mode==='light'?'black' : 'white',fontSize:'25px'} }\r\n          rows=\"10\"\r\n        ></textarea>\r\n      </div>\r\n\r\n\r\n      <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleLoClick}>Convert To LowerCase</button>\r\n      <button className=\"btn btn-primary mx\" onClick={repwor}>Replace All Occurences</button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={tocleartext}>clear the console</button>\r\n      {/* <button className=\"btn btn-primary mx\" onClick={firstcharcap}>Capitalise all first character </button> */}\r\n      <button className=\"btn btn-primary mx-\" onClick={handlecopy}>copy text</button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleextraspace}>remove extra space</button>\r\n\r\n\r\n    </div>\r\n     <div className=\"container my-5\" style={{color : props.mode==='light'?'black' : 'white'}}>\r\n        <h1 >Your Text Summary </h1>\r\n        <p>{text.split(\" \").length} words and {text.length} characters and {text.split(\".\").length} sentences. and {text.split(\"\\n\").length\r\n        } paragraphs</p>\r\n        <p>{0.008*text.split(\" \").length} Minutes Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter Something In The The Textbox Above To Preview Here\"}</p>\r\n     </div>\r\n     \r\n     \r\n    </>\r\n  );\r\n}\r\n\r\nTextForms.defaultProps = {\r\n  heading: \"This Is My Heading\",\r\n};\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForms from './components/TextForms';\nimport About from './components/About';\nimport React from 'react';\nimport { useState } from 'react';\n\nfunction App() {\n  const [mode,setMode] = useState('light');//whether dark mode is ewnabled or not\n  \n  const togglemode =()=>{\n    if(mode==='dark'){\n      setMode('light');\n      document.body.style.backgroundColor='white';\n\n    }\n    else{\n      setMode('dark');\n      document.body.style.backgroundColor='#2d3063';\n  \n    }\n  }\n  return (\n    <>\n    {/* <Navbar title=\"Textutils\" hometext=\"Home\"/> */}\n    <Navbar  title=\"Text Analyzer\" mode={mode} togglemode={togglemode}/>\n    <div className=\"container my-3\">\n    <TextForms heading=\"Enter The Text To Analyze\" mode={mode} />\n    </div>\n    {/* <About/> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}